if(i == 1){
plot(YtRealization(500),col = i, type = 'l',ylim=c(-40,40), ylab = 'Y-values', xlim=c(0,500), xlab='Time')
}
else{
lines(YtRealization(500), col = i, lty = 1)
}
next
}
for(i in c(1:10)){
if(i == 1){
plot(YtRealization(500),col = i, type = 'l',ylim=c(-40,40), ylab = 'Y-values', xlim=c(0,500), xlab='Time')
}
else{
lines(YtRealization(500), col = i, lty = 1)
}
next
}
for(i in c(1:10)){
if(i == 1){
plot(YtRealization(500),col = i, type = 'l',ylim=c(-40,40), ylab = 'Y-values', xlim=c(0,500), xlab='Time')
}
else{
lines(YtRealization(500), col = i, lty = 1)
}
next
}
for(i in c(1:10)){
if(i == 1){
plot(YtRealization(500),col = i, type = 'l',ylim=c(-40,40), ylab = 'Y-values', xlim=c(0,500), xlab='Time')
}
else{
lines(YtRealization(500), col = i, lty = 1)
}
next
}
for(i in c(1:10)){
if(i == 1){
plot(YtRealization(500),col = i, type = 'l',ylim=c(-40,40), ylab = 'Y-values', xlim=c(0,500), xlab='Time')
}
else{
lines(YtRealization(500), col = i, lty = 1)
}
next
}
for(i in c(1:10)){
if(i == 1){
plot(YtRealization(500),col = i, type = 'l',ylim=c(-40,40), ylab = 'Y-values', xlim=c(0,500), xlab='Time')
}
else{
lines(YtRealization(500), col = i, lty = 1)
}
next
}
for(i in c(1:10)){
if(i == 1){
plot(YtRealization(500),col = i, type = 'l',ylim=c(-40,40), ylab = 'Y-values', xlim=c(0,500), xlab='Time')
}
else{
lines(YtRealization(500), col = i, lty = 1)
}
next
}
for(i in c(1:10)){
if(i == 1){
plot(YtRealization(500),col = i, type = 'l',ylim=c(-40,40), ylab = 'Y-values', xlim=c(0,500), xlab='Time')
}
else{
lines(YtRealization(500), col = i, lty = 1)
}
next
}
for(i in c(1:10)){
if(i == 1){
plot(YtRealization(500),col = i, type = 'l',ylim=c(-40,40), ylab = 'Y-values', xlim=c(0,500), xlab='Time')
}
else{
lines(YtRealization(500), col = i, lty = 1)
}
next
}
for(i in c(1:10)){
if(i == 1){
plot(YtRealization(500),col = i, type = 'l',ylim=c(-40,40), ylab = 'Y-values', xlim=c(0,500), xlab='Time')
}
else{
lines(YtRealization(500), col = i, lty = 1)
}
next
}
x = c(0,1,1,1,2,3,4,4,5,14)
mean(x)+median(x)+mode(x)
x = c(0,1,1,1,2,3,4,4,5,14)
mean(x)+median(x)+mode(x)
mean(x)
median(x)
mode(x)
mod(x)
ts.sim <- arima.sim(list(order = c(1,1,0), ar = 0.7), n = 200)
ts.plot(ts.sim)
ts.sim <- arima.sim(list(order = c(1,1,0), ar = 0.7), n = 200)
acf(ts.sim)
pacf(ts.sim)
ts.sim <- arima.sim(list(order = c(1,0,0), ar = -0.8), n = 200)
acf(ts.sim)
arimaSIM = arima.sim(list(order = c(12,0,0),ar=c(-0.8),n=200))
arimaSIM = arima.sim(list(order = c(12,0,0),ar=c(-0.8)),n=200))
arimaSIM = arima.sim(list(order = c(12,0,0),ar=c(-0.8)),n=200)
library(forecast)
model <- Arima(ts(rnorm(100),freq=4), order=c(1,1,1), seasonal=c(1,1,1),
fixed=c(phi=0.5, theta=-0.4, Phi=0.3, Theta=-0.2))
install.packages("forecast")
library(forecast)
model <- Arima(ts(rnorm(100),freq=4), order=c(1,1,1), seasonal=c(1,1,1),
fixed=c(phi=0.5, theta=-0.4, Phi=0.3, Theta=-0.2))
model <- arima(ts(rnorm(100),freq=4), order=c(1,1,1), seasonal=c(1,1,1),
fixed=c(phi=0.5, theta=-0.4, Phi=0.3, Theta=-0.2))
foo <- simulate(model, nsim=1000)
fit <- Arima(foo, order=c(1,1,1), seasonal=c(1,1,1))
model <- Arima(ts(rnorm(189),freq=12), order=c(0,1,1), seasonal=c(0,1,1), fixed=c(theta=-0.8, Theta=-0.8))
install.packages("forecasting")
library(forecast)
library(forecast)
install.packages("forecast")
library(forecast)
install.packages(c('devtools','curl'))
library(forecast)
x <- simulate(model, nsim=189)
model <- Arima(ts(rnorm(189),freq=12), order=c(0,1,1), seasonal=c(0,1,1), fixed=c(theta=-0.8, Theta=-0.8))
x <- simulate(model, nsim=189)
model <- Arima(ts(rnorm(200),freq=12), order=c(1,0,0), seasonal=c(0,0,0), fixed=c(theta=-0.8))
model <- Arima(ts(rnorm(200),freq=12), order=c(1,0,0), seasonal=c(0,0,0), fixed=c(theta=-0.8, Theta = 0))
acf(model)
x <- simulate(model, nsim=189)
acf(x)
arima.m<-arima.sim(list(order = c(0,0,12), ma = c(0.7,rep(0,10),0.9)), n = 200)
acf(arima.m)
?rep
rep(1:4, 2)
rep(0,10)
arima.m1<-arima.sim(list(order = c(0,0,12),ar = c(-0.8,rep(0,10),0), ma = c(0,rep(0,10),0)), n = 200)
arima.m1<-arima.sim(list(order = c(0,0,0),ar = c(-0.8,rep(0,10),0), ma = c(0,rep(0,10),0)), n = 200)
arima.m1<-arima.sim(list(order = c(0,0,0),ar = c(-0.8,rep(0,10),0.1), ma = c(0,rep(0,10),0)), n = 200)
arima.m1<-arima.sim(list(order = c(1,0,12),ar = c(-0.8,rep(0,10),0.1), ma = c(0,rep(0,10),0)), n = 200)
arima.m<-arima.sim(list(order = c(0,0,12),ar = c(0.7,rep(0,10),0.9), ma = c(0.7,rep(0,10),0.9)), n = 200)
arima.m<-arima.sim(list(order = c(0,0,12), ma = c(0.7,rep(0,10),0.9)), n = 200)
acf(arima.m)
arima.m1<-arima.sim(list(order = c(1,0,12), ma = c(0,rep(0,10),0)), n = 200)
arima.m1<-arima.sim(list(order = c(1,0,12), ma = c(0,rep(0,10),0)), n = 200)
arima.m1<-arima.sim(list(order = c(0,0,12), ma = c(0,rep(0,10),0)), n = 200)
acf(arima.m)
arima.m1<-arima.sim(list(order = c(0,1,12), ma = c(0,rep(0,10),0)), n = 200)
acf(arima.m)
arima.m1<-arima.sim(list(order = c(0,1,12), ma = c(-0.4,rep(0,10),0.8)), n = 200)
acf(arima.m)
arima.m1<-arima.sim(list(order = c(0,1,12), ma = c(-0.4,rep(0,10),0.8)), n = 200)
arima.m1<-arima.sim(list(order = c(0,1,12), ma = c(-0.4,rep(0,10),0.8)), n = 200)
acf(arima.m1)
arima.m1<-arima.sim(list(order = c(0,0,12), ma = c(-0.4,rep(0,10),0.8)), n = 200)
acf(arima.m1)
acf(arima.m1, xlim = (0,40))
?acf
acf(arima.m1, lag.max = 36)
arima.m1<-arima.sim(list(order = c(0,0,12), ar = c(-0.4,rep(0,10),0.8)), n = 200)
arima.m1<-arima.sim(list(order = c(0,0,12), ar = c(0.6,rep(0,10),0.8)), n = 200)
arima.m1<-arima.sim(list(order = c(1,0,12), ar = c(0.6,rep(0,10),0.8)), n = 200)
arima.m1<-arima.sim(list(order = c(0,0,12), ar = c(0.6,rep(0,10),0.8)), n = 200)
ts_AR <- arima.sim(n=10000, list(ar=c(-0.8)))
model_AR <- arima(ts_AR, order=c(1,0,0))
arima.sim(model=as.list(coef(model_AR)), n=100)
modelSIM = arima.sim(model=as.list(coef(model_AR)), n=100)
acf(modelSIM)
ts_AR <- arima.sim(n=10000, list(ar=c(-0.8)))
model_AR <- arima(ts_AR, order=c(1,0,12))
modelSIM = arima.sim(model=as.list(coef(model_AR)), n=100)
acf(modelSIM)
ts_AR <- arima.sim(n=10000, list(ar=c(-0.8,rep(0,10),0.8)))
ts_AR <- arima.sim(n=10000, list(ar=c(-0.8,rep(0,10),0.8)))
arima.m<-arima.sim(list(order = c(0,0,12),ma = c(-0.4,rep(0,10),-0.9)), n = 200)
acf(arima.m)
arima.m5<-arima.sim(list(order = c(0,0,12),ma = c(-0.4,rep(0,10),-0.9)), n = 200)
acf(arima.m5)
arima.m5<-arima.sim(list(order = c(0,0,12),ma = c(-0.4,rep(0,10),-0.9)), n = 200)
acf(arima.m5, max.lag=36)
arima.m5<-arima.sim(list(order = c(0,0,12),ma = c(-0.4,rep(0,10),-0.9)), n = 200)
acf(arima.m5, lag.max=36)
arima.m5<-arima.sim(list(order = c(0,0,12),ma = c(-0.4,rep(0,10),0.8)), n = 200)
acf(arima.m5, lag.max=36)
arima.m6 = arima.sim(list(order = c(0,0,12),ma = c(0.4,rep(0,10),0)), n = 200)
acf(arima.m6, lag.max=36)
arima.m6 = arima.sim(list(order = c(0,0,12),ar = c(0,rep(0,10),-0.7), ma = c(0.4,rep(0,10),0)), n = 200)
arimaSIM2 = arima.sim(model=list(ar=c(rep(0,11), -0.8)), n=5000)
plot(arimaSIM2)
acf(arimaSIM2, lag.max=50, main = "ACF of (0,0,0) x (1,0,0)_12 model")
pacf(arimaSIM2, lag.max=50, main = "PACF of (0,0,0) x (1,0,0)_12 model")
acf(arimaSIM2, lag.max=50, main = "ACF of (0,0,0) x (1,0,0)_12 model")
acf(arimaSIM2, lag.max=50, main = "ACF of (0,0,0) x (1,0,0)_12 model")
pacf(arimaSIM2, lag.max=50, main = "PACF of (0,0,0) x (1,0,0)_12 model")
arimaSIM3 = arima.sim(model=list(ar = c(0.9,rep(0,11)), ma = c(rep(0,11),0.7)), n = 5000)
plot(arimaSIM3)
acf(arimaSIM3, lag.max=50, main = "ACF of (0,0,1) x (0,0,1)_12 model")
pacf(arimaSIM3, lag.max=50, main = "PACF of (0,0,1) x (0,0,1)_12 model")
arimaSIM4 = arima.sim(model=list(ar=c(-0.6, rep(0,10), -0.8, -0.48)), n=5000)
plot(arimaSIM4)
acf(arimaSIM4, lag.max=50, main = "ACF of (1,0,0) x (1,0,0)_12 model")
pacf(arimaSIM4, lag.max=50, main = "PACF of (1,0,0) x (1,0,0)_12 model")
acf(arimaSIM4, lag.max=50, main = "ACF of (1,0,0) x (1,0,0)_12 model")
arimaSIM5 = arima.sim(model=list(ma = c(-0.4,rep(0,10),0.8,-0.32)), n = 5000)
plot(arimaSIM5)
acf(arimaSIM5, lag.max=50, main = "ACF of (0,0,1) x (0,0,1)_12 model")
pacf(arimaSIM5, lag.max=50, main = "PACF of (0,0,1) x (0,0,1)_12 model")
arimaSIM6 = arima.sim(model=list(ar = c(rep(0,11), -0.4), ma = c(-0.7, rep(0,11))), n = 5000)
plot(arimaSIM6)
acf(arimaSIM6, lag.max=50, main = "ACF of (0,0,1) x (1,0,0)_12 model")
pacf(arimaSIM6, lag.max=50, main = "PACF of (0,0,1) x (1,0,0)_12 model")
arimaSIM1 = arima.sim(model=list(ar=c(0.8)),n=5000)
plot(arimaSIM1, ylab = 'Obtained Value', main = 'Observations for a (1,0,0) x (0,0,0)_12 model')
acf(arimaSIM1, main = "ACF of (1,0,0) x (0,0,0)_12 model")
pacf(arimaSIM1, main = "PACF of (1,0,0) x (0,0,0)_12 model")
arimaSIM6 = arima.sim(model=list(ar = c(rep(0,11), 0.7), ma = c(0.4, rep(0,11))), n = 5000)
plot(arimaSIM6, ylab = 'Obtained Value', main = 'Observations for a (0,0,1) x (1,0,0)_12 model')
acf(arimaSIM6, lag.max=50, main = "ACF of (0,0,1) x (1,0,0)_12 model")
pacf(arimaSIM6, lag.max=50, main = "PACF of (0,0,1) x (1,0,0)_12 model")
A = matrix(c(0.7, 0.2, 0.04, 0.95))
A = matrix(c(0.7, 0.2, 0.04, 0.95))
A = matrix(c(0.7, 0.2, 0.04, 0.95), nrow=2)
View(A)
View(A)
B = matrix(c(0.8, 0.02), nrow = 2)
Sigma1 = matrix(c(0.04, 0, 0, 0.01), nrow=2)
X = matrix(nrow=2,ncol=3) ## Allocating space
X[,1] = c(-3, 1.2)
X = matrix(nrow=2,ncol=4) ## Allocating space
X[,1] = c(-3, 1.2)
X[,2] = A %*% X[,1] + B*U0
U0 = 2
X[,2] = A %*% X[,1] + B*U0
A = matrix(c(0.7, 0.2, 0.04, 0.95), nrow=2)
B = matrix(c(0.8, 0.02), nrow = 2)
Sigma1 = matrix(c(0.04, 0, 0, 0.01), nrow=2)
X = matrix(nrow=2,ncol=4) ## Allocating space
X[,1] = c(-3, -1.2)
U0 = 2
X[,2] = A %*% X[,1] + B*U0
Sigma2 = A %*% Sigma1 %*% t(A) + Sigma1
X[,3] = A %*% X[,2] + B*U0
Sigma3 = A %*% Sigma2 %*% t(A) + Sigma1
X[,4] = A %*% X[,3] + B*U0
Sigma4 = A %*% Sigma3 %*% t(A) + Sigma1
View(X)
View(X)
View(Sigma4)
View(Sigma4)
View(B)
View(B)
View(A)
View(A)
A = matrix(c(0.7, 0.04, 0.2, 0.95), nrow=2)
View(A)
View(A)
B = matrix(c(0.8, 0.02), nrow = 2)
Sigma1 = matrix(c(0.04, 0, 0, 0.01), nrow=2)
X = matrix(nrow=2,ncol=4) ## Allocating space
X[,1] = c(-3, -1.2)
U0 = 2
X[,2] = A %*% X[,1] + B*U0
Sigma2 = A %*% Sigma1 %*% t(A) + Sigma1
X[,3] = A %*% X[,2] + B*U0
Sigma3 = A %*% Sigma2 %*% t(A) + Sigma1
X[,4] = A %*% X[,3] + B*U0
Sigma4 = A %*% Sigma3 %*% t(A) + Sigma1
View(X)
View(X)
View(A)
View(A)
View(B)
View(B)
X[,4]
View(Sigma1)
View(Sigma1)
View(X)
View(X)
View(Sigma4)
View(Sigma4)
View(Sigma2)
View(Sigma2)
len(X)
X = matrix(nrow=2,ncol=100) ## Allocating space
X[,1] = c(-3, -1.2)
length(X)
for(i in 2:length(X[,:]))
length(X[,:])
length(X[1,])
X = matrix(nrow=2,ncol=100) ## Allocating space
X[,1] = c(-3, -1.2)
for(i in 2:length(X[1,])){
X[,i] = A %*%X[,i-1] + B*U0
}
View(X)
View(X)
plot(X[1,])
X = matrix(nrow=2,ncol=300) ## Allocating space
X = matrix(nrow=2,ncol=300) ## Allocating space
X[,1] = c(-3, -1.2)
for(i in 2:length(X[1,])){
X[,i] = A %*%X[,i-1] + B*U0
}
plot(X[1,])
plot(X[2,])
plot(X[2,], lty = 2)
plot(X[2,], lty = 1)
plot(X[2,], lty = 16)
plot(X[2,], type = "l", lty = 2)
plot(X[2,], type = "l", lty = 1, col = "red")
plot(X[2,], type = "l", lty = 1, col = "red")
lines(X[1,], type = "l", lty = 1, col = "blue")
plot(X[2,], type = "l", lty = 1, col = "red", ylim = c(-3,15))
lines(X[1,], type = "l", lty = 1, col = "blue")
legend(0,15,c("Indoor Air temp","Wall temperature"),)
legend(0,15,c("Indoor Air temp","Wall temperature"), col=c("red","blue"), type = c("l","l"))
legend(0,15,c("Indoor Air temp","Wall temperature"), col=c("red","blue"))
legend(0,15,c("Indoor Air temp","Wall temperature"), col=c("red","blue"), lty = c(1,1))
plot(X[2,]+21, type = "l", lty = 1, col = "red", ylim = c(-3,15))
lines(X[1,]+21, type = "l", lty = 1, col = "blue")
plot(X[2,], type = "l", lty = 1, col = "red", ylim = c(-3,15))
lines(X[1,], type = "l", lty = 1, col = "blue")
Xscaled = matrix(nrow=2,ncol=300)
Xscaled = matrix(nrow=2,ncol=300)
Xscaled = matrix(nrow=2,ncol=300)
for(i in 1:length(Xscaled[1,])){
Xscaled[,i] = X[,i]+21
}
plot(Xscaled[2,], type = "l", lty = 1, col = "red", ylim = c(-3,15))
lines(Xscaled[1,], type = "l", lty = 1, col = "blue")
legend(0,15,c("Indoor Air temp","Wall temperature"), col=c("red","blue"), lty = c(1,1))
plot(Xscaled[2,], type = "l", lty = 1, col = "red", ylim = c(18,40))
lines(Xscaled[1,], type = "l", lty = 1, col = "blue")
plot(Xscaled[2,], type = "l", lty = 1, col = "red", ylim = c(18,35))
lines(Xscaled[1,], type = "l", lty = 1, col = "blue")
par(mfrow=c(1,1))
plot(X[2,], type = "l", lty = 1, col = "red", ylim = c(-3,15))
lines(X[1,], type = "l", lty = 1, col = "blue")
legend(0,15,c("Indoor Air temp deviation","Wall temperature deviation"), col=c("red","blue"), lty = c(1,1))
Xscaled = matrix(nrow=2,ncol=300)
for(i in 1:length(Xscaled[1,])){
Xscaled[,i] = X[,i]+21
}
plot(Xscaled[2,], type = "l", lty = 1, col = "red", ylim = c(18,35))
lines(Xscaled[1,], type = "l", lty = 1, col = "blue")
legend(0,15,c("Indoor Air temp","Wall temperature"), col=c("red","blue"), lty = c(1,1))
par(mfrow=c(1,1))
plot(X[2,], type = "l", lty = 1, col = "red", ylim = c(-3,15))
lines(X[1,], type = "l", lty = 1, col = "blue")
legend(0,15,c("Indoor Air temp deviation","Wall temperature deviation"), col=c("red","blue"), lty = c(1,1))
Xscaled = matrix(nrow=2,ncol=300)
for(i in 1:length(Xscaled[1,])){
Xscaled[,i] = X[,i]+21
}
plot(Xscaled[2,], type = "l", lty = 1, col = "red", ylim = c(18,35))
lines(Xscaled[1,], type = "l", lty = 1, col = "blue")
legend(0,35,c("Indoor Air temp","Wall temperature"), col=c("red","blue"), lty = c(1,1))
mu = matrix(nrow=2,ncol=1)
solve(A%*%mu+B*U0,mu)
##### LOG-OUTPUT FILE WITH VIX -----
## Setting packages
library(MASS)
library(stats)
library(tseries)
library(forecast)
library(lubridate)
library(date)
library(zoo)
library(marima)
library(vars)
setwd("C:/Users/ejb/Documents/GitHub/Thesis/Data/MonthlyReturns")
data = read.csv("Monthly - Average Equal Weighted Returns LOGRETURN.csv", header =T, sep = ";")
names(data)[1] = "YM"
#Import predictors
PredData = read.csv("PredictorData2016.csv", header =T, sep = ";")
predCols = ncol(PredData)
predRows = nrow(PredData)
names(PredData)[1] = "YM"
YM = PredData$YM
PredData$Month = substr(PredData$YM, 5,6)
PredData$Year = substr(PredData$YM, 1, 4)
#Removing NaNs
for(i in 1:predCols){
list = which(PredData[,i] == "NaN")
PredData[list,i] = 0
list = NULL
}
PredData$IndexDiff = 0
for(i in 2:predRows){
PredData$IndexDiff[i] = PredData$Index[i]/PredData$Index[i-1]
}
PredData$D12Diff = 0
for(i in 2:predRows){
PredData$D12Diff[i] = PredData$D12[i]/PredData$D12[i-1]
}
PredData$E12Diff = 0
for(i in 2:predRows){
PredData$E12Diff[i] = PredData$E12[i]/PredData$E12[i-1]
}
predCols2 = ncol(PredData)
PredData = PredData[,c(1,21,22,23, 5:20)]
MatchList = match(PredData$YM, data$YM)
startRow = which(MatchList %in% 1)
PredDataOutput = PredData[startRow:nrow(PredData),1:predCols]
PredDataOutput = PredDataOutput[1:nrow(PredDataOutput)-1,]
outputRows = nrow(PredDataOutput)+1 #to account for the shift in index data
data$YM[1]
PredDataOutput$YM[1]
data = data[1:outputRows,]
#there should a shift of 1 between the two dates underneath
data$YM[nrow(data)]
PredDataOutput$YM[nrow(PredDataOutput)]
#INCORPORATING VIX
VixData = read.csv("VIXCLSMonthly.csv", header = F, sep = ";")
names(VixData)[1] = "YMD"
VixData = VixData[2:339,]
VixData$Month = substr(VixData$YMD, 6,7)
VixData$Year = substr(VixData$YMD, 1, 4)
VixData$YM = paste(VixData$Year, VixData$Month, sep="")
VIX = numeric(outputRows-1)
MatchList = match(data$YM, VixData$YM)
startRowVIX = which(MatchList %in% 1)
endingObservation = length(VIX[startRowVIX:(outputRows-1)])
VIX[startRowVIX:(outputRows-1)] = VixData$V2[1:endingObservation]
PredDataOutput = PredDataOutput[,2:predCols]
## Incorporating recession data
RecessionData = read.csv("NBERRecessions.csv", header = T, sep = ";")
names(RecessionData)[1] = "YM"
#INDEX DATA FOR OUTPUT
originalData = data[,2:11]
dataCols = ncol(originalData)
#Removing NaNs
for(i in 1:dataCols){
list = which(originalData[,i] == "NaN")
originalData[list,i] = 0
list = NULL
}
#Shift data
outputY = originalData[2:(outputRows), 1]
outputX = originalData[1:(outputRows-1),]
predictionTime = data$YM[2:outputRows] #dates are the date of the Y variable, so we predict january '12, but have december '11 info available
outputData = cbind(outputX, PredDataOutput, VIX, outputY, predictionTime, RecessionData$Recession)
View(outputData)
View(outputData)
lm(outputData$outputY ~ outputData$D12Diff)
model = lm(outputData$outputY ~ outputData$D12Diff)
summary(model)
model = lm(outputData$outputY ~ outputData$csp)
summary(model)
model = lm(outputData$outputY ~ outputData$corpr)
summary(model)
model = lm(outputData$outputY ~ outputData$infl)
summary(model)
model = lm(outputData$outputY ~ outputData$b.m)
summary(model)
model = lm(outputData$outputY ~ outputData$csp + 0, )
summary(model)
model = lm(outputData$outputY ~ outputData$csp)
summary(model)
model = lm(outputData$outputY ~ outputData$b.m)
summary(model)
model = lm(outputData$outputY ~ outputData$Rfree)
summary(model)
model = lm(outputData$outputY ~ outputData$D12Diff)
summary(model)
model = lm(outputData$outputY ~ outputData$csp)
summary(model)
summary(model) #95% significant, positive
model = lm(outputData$outputY ~ outputData$corpr)
summary(model)
model = lm(outputData$outputY ~ outputData$infl)
summary(model)
model = lm(outputData$outputY ~ outputData$b.m)
summary(model)
model = lm(outputData$outputY ~ outputData$b.m)
summary(model)
model = lm(outputData$outputY ~ outputData$Rfree)
summary(model)
model = lm(outputData$outputY ~ outputData$svar)
summary(model)
model = lm(outputData$outputY ~ outputData$VIX)
summary(model)
model = lm(outputData$outputY[764,] ~ outputData$VIX[764,])
model = lm(outputData$outputY[764:nRows] ~ outputData$VIX[764:nRows])
model = lm(outputData$outputY[764:outputRows] ~ outputData$VIX[764:outputRows])
summary(model)
model = lm(outputData$outputY ~ outputData$Utils)
summary(model) #not significant
model = lm(outputData$outputY ~ outputData$Shops)
summary(model) #99.9% significant, positive - noDur is the one to predict currently
summary(model) #99.9% significant, positive - noDur is the one to predict currently
model = lm(outputData$outputY ~ outputData$Telcm)
summary(model) #99.9% significant, positive - noDur is the one to predict currently
model = lm(outputData$outputY ~ outputData$Manuf)
summary(model) #99.9% significant, positive - noDur is the one to predict currently
model = lm(outputData$outputY ~ outputData$NoDur)
summary(model) #99.9% significant, positive - noDur is the one to predict currently
model = lm(outputData$outputY ~ outputData$Enrgy)
summary(model) #99.9% significant, positive - noDur is the one to predict currently
model = lm(outputData$outputY ~ outputData$HiTec)
summary(model) #99.9% significant, positive - noDur is the one to predict currently
model = lm(outputData$outputY ~ outputData$Other)
summary(model) #99.9% significant, positive - noDur is the one to predict currently
model = lm(outputData$outputY ~ outputData$Durbl)
summary(model) #99.9% significant, positive - noDur is the one to predict currently
model = lm(outputData$outputY ~ outputData$Utils)
summary(model) #99.9% significant, positive - noDur is the one to predict currently
model = lm(outputData$outputY ~ outputData$NoDur)
summary(model) #99.9% significant, positive - noDur is the one to predict currently
